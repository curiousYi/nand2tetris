// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    ALUnostat( x=x, y=y, zx=zx, nx=nx, zy=zy, ny=ny, f=f, no=no, out[15]=out15, out[14]=out14, out[13]=out13, out[12]=out12, out[11]=out11, out[10]=out10, out[9]=out9, out[8]=out8, out[7]=out7, out[6]=out6, out[5]=out5, out[4]=out4, out[3]=out3, out[2]=out2, out[1]=out1, out[0]=out0);
    And(a=out15, b=true, out=heyThere);
    Or(a=heyThere, b=out14, out=zero15checker);
    Or(a=zero15checker, b=out14, out=zero14checker);
    Or(a=zero14checker, b=out13, out=zero13checker);
    Or(a=zero13checker, b=out12, out=zero12checker);
    Or(a=zero12checker, b=out11, out=zero11checker);
    Or(a=zero11checker, b=out10, out=zero10checker);
    Or(a=zero10checker, b=out9, out=zero9checker);
    Or(a=zero9checker, b=out8, out=zero8checker);
    Or(a=zero8checker, b=out7, out=zero7checker);
    Or(a=zero7checker, b=out6, out=zero6checker);
    Or(a=zero6checker, b=out5, out=zero5checker);
    Or(a=zero5checker, b=out4, out=zero4checker);
    Or(a=zero4checker, b=out3, out=zero3checker);
    Or(a=zero3checker, b=out2, out=zero2checker);
    Or(a=zero2checker, b=out1, out=zero1checker);
    Or(a=zero1checker, b=out0, out=notzr);
    Or(a=heyThere, b=false, out=ng);
    Not(in=notzr, out=zr);
    Or16(a[0]=out0 ,a[1]=out1 ,a[2]=out2 ,a[3]=out3 ,a[4]=out4 ,a[5]=out5 ,a[6]=out6 ,a[7]=out7 ,a[8]=out8 ,a[9]=out9 ,a[10]=out10 ,a[11]=out11 ,a[12]=out12 ,a[13]=out13 ,a[14]=out14 ,a[15]=out15 , b=false, out=out);
    }
